// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generate directory style contents 1`] = `
"# TypeAlias

## A

A

**Signature:**
\`\`\`typescript
export declare type A = string;
\`\`\`

## B

[A](./typealias#a)

**Signature:**
\`\`\`typescript
export declare type B = number;
\`\`\`

## FallbackLocale

Falback Locale

**Signature:**
\`\`\`typescript
export declare type FallbackLocale = Locale | Locale[] | {
    [locale in string]: Locale[];
} | false;
\`\`\`

### Remarks

This is remarks of \`Fallback Locale\`

## Locale

Locale

**Signature:**
\`\`\`typescript
export declare type Locale = string;
\`\`\`

## LocaleMessage

Locale Message resources

**Signature:**
\`\`\`typescript
export declare type LocaleMessage = string | LocaleMessage[];
\`\`\`

"
`;

exports[`generate directory style contents 2`] = `
"# Function

## add

add function : \`x\`

**Signature:**
\`\`\`typescript
export declare function add(a: number, b: number): number;
\`\`\`

### Parameters

| Parameter | Type | Description |
| --- | --- | --- |
| a | number | target \`1\` |
| b | number | target 2 |

### Returns

 result as \`a\` + \`b\`

### Throws

- \`SyntaxError\` this is syntax error
- \`Error\` this is general error

### Remarks

This is add function remarks: [ErrorCodes](./enum#errorcodes). See [add](https://foo.bar.com/api/add).

### Examples

example of \`add\` function:
\`\`\`javascript
console.log(add(1, 1))
\`\`\`


"
`;

exports[`generate directory style contents 3`] = `
"# Interface

## Calculatable

Calculatable interface

**Signature:**
\`\`\`typescript
export interface Calculatable 
\`\`\`


### Methods

#### add

add method

**Signature:**
\`\`\`typescript
add(a: number, b: number): number;
\`\`\`

*Parameters*

| Parameter | Type | Description |
| --- | --- | --- |
| a | number | target 1 |
| b | number | target 2 |


### Properties

#### PI

PI

**Signature:**
\`\`\`typescript
PI: number;
\`\`\`


"
`;

exports[`generate directory style contents 4`] = `
"# Class

## Calculator

Calculator class

**Signature:**
\`\`\`typescript
export declare class Calculator implements Calculatable 
\`\`\`

### Remarks

This is remarks of Calculator class

### Examples


\`\`\`javascript
const c = new Calculator()
const v1 = c.add(1, 1)
const v2 = c.sub(1, 1)
\`\`\`



### Constructor

Conssutructor of usage

**Signature:**
\`\`\`typescript
constructor(type: string);
\`\`\`


### Methods

#### add

add method

**Signature:**
\`\`\`typescript
add(a: number, b: number): number;
\`\`\`

*Parameters*

| Parameter | Type | Description |
| --- | --- | --- |
| a | number | target 1 |
| b | number | target 2 |

#### sub

sub method

**Signature:**
\`\`\`typescript
sub(a: number, b: number): number;
\`\`\`

*Parameters*

| Parameter | Type | Description |
| --- | --- | --- |
| a | number | target 1 |
| b | number | target 2 |


### Properties

#### PI

PI

**Signature:**
\`\`\`typescript
PI: number;
\`\`\`

#### type

calcurator types 'simple'

**Signature:**
\`\`\`typescript
type: string;
\`\`\`


"
`;

exports[`generate directory style contents 5`] = `
"# Variable

## Config

Configrations 

**Signature:**
\`\`\`typescript
Config: {
    [name: string]: unknown;
}
\`\`\`

## VERSION

app version

**Signature:**
\`\`\`typescript
VERSION = \\"1.0.0\\"
\`\`\`

### Remarks

you can lookup application version that is semver format.

### Examples


\`\`\`javascript
console.log(VERSION)
\`\`\`


"
`;

exports[`generate directory style contents 6`] = `
"# Enum

## ErrorCodes

Error Code

**Signature:**
\`\`\`typescript
export declare enum ErrorCodes 
\`\`\`

### Members

| Member | Value| Description |
| --- | --- | --- |
| InvalidFormat | 1 | Invalid format |
| Succcess | 0 | Success |

## TokenChars

Token Characters

**Signature:**
\`\`\`typescript
export declare enum TokenChars 
\`\`\`

### Members

| Member | Value| Description |
| --- | --- | --- |
| Modulo | \\"%\\" | Modulo charactor |
| Plus | \\"+\\" | Plus charactor |

### Remarks

This is remarks of Token Chararaceters

"
`;

exports[`generate directory style contents 7`] = `
"# Function

## isBoolean

Whether the value is Boolean or not

**Signature:**
\`\`\`typescript
export declare function isBoolean(val: unknown): val is boolean;
\`\`\`

### Parameters

| Parameter | Type | Description |
| --- | --- | --- |
| val | unknown | target value |

### Returns

 boolean value

## isFunction

Whether the value is Function or not

**Signature:**
\`\`\`typescript
export declare function isFunction(val: unknown): val is Function;
\`\`\`

### Parameters

| Parameter | Type | Description |
| --- | --- | --- |
| val | unknown | target value |

### Returns

 boolean value

## isObject

Whether the value is Object or not

**Signature:**
\`\`\`typescript
export declare function isObject(val: unknown): val is Record<string, unknown>;
\`\`\`

### Parameters

| Parameter | Type | Description |
| --- | --- | --- |
| val | unknown | target value |

### Returns

 boolean value

## isPlainObject

Whether the value is Plain Object or not

**Signature:**
\`\`\`typescript
export declare function isPlainObject(val: unknown): val is Record<string, unknown>;
\`\`\`

### Parameters

| Parameter | Type | Description |
| --- | --- | --- |
| val | unknown | target value |

### Returns

 boolean value

## isPromise

Whether the value is Promise or not

**Signature:**
\`\`\`typescript
export declare function isPromise<T = any>(val: unknown): val is Promise<T>;
\`\`\`

### Parameters

| Parameter | Type | Description |
| --- | --- | --- |
| val | unknown | target value |

### Returns

 boolean value

## isString

Whether the value is String or not

**Signature:**
\`\`\`typescript
export declare function isString(val: unknown): val is string;
\`\`\`

### Parameters

| Parameter | Type | Description |
| --- | --- | --- |
| val | unknown | target value |

### Returns

 boolean value

## isSymbol

Whether the value is Symbol or not

**Signature:**
\`\`\`typescript
export declare function isSymbol(val: unknown): val is symbol;
\`\`\`

### Parameters

| Parameter | Type | Description |
| --- | --- | --- |
| val | unknown | target value |

### Returns

 boolean value

"
`;

exports[`generate prefix style contents 1`] = `
"# TypeAlias

## A

A

**Signature:**
\`\`\`typescript
export declare type A = string;
\`\`\`

## B

[A](./library1-typealias#a)

**Signature:**
\`\`\`typescript
export declare type B = number;
\`\`\`

## FallbackLocale

Falback Locale

**Signature:**
\`\`\`typescript
export declare type FallbackLocale = Locale | Locale[] | {
    [locale in string]: Locale[];
} | false;
\`\`\`

### Remarks

This is remarks of \`Fallback Locale\`

## Locale

Locale

**Signature:**
\`\`\`typescript
export declare type Locale = string;
\`\`\`

## LocaleMessage

Locale Message resources

**Signature:**
\`\`\`typescript
export declare type LocaleMessage = string | LocaleMessage[];
\`\`\`

"
`;

exports[`generate prefix style contents 2`] = `
"# Function

## add

add function : \`x\`

**Signature:**
\`\`\`typescript
export declare function add(a: number, b: number): number;
\`\`\`

### Parameters

| Parameter | Type | Description |
| --- | --- | --- |
| a | number | target \`1\` |
| b | number | target 2 |

### Returns

 result as \`a\` + \`b\`

### Throws

- \`SyntaxError\` this is syntax error
- \`Error\` this is general error

### Remarks

This is add function remarks: [ErrorCodes](./library1-enum#errorcodes). See [add](https://foo.bar.com/api/add).

### Examples

example of \`add\` function:
\`\`\`javascript
console.log(add(1, 1))
\`\`\`


"
`;

exports[`generate prefix style contents 3`] = `
"# Interface

## Calculatable

Calculatable interface

**Signature:**
\`\`\`typescript
export interface Calculatable 
\`\`\`


### Methods

#### add

add method

**Signature:**
\`\`\`typescript
add(a: number, b: number): number;
\`\`\`

*Parameters*

| Parameter | Type | Description |
| --- | --- | --- |
| a | number | target 1 |
| b | number | target 2 |


### Properties

#### PI

PI

**Signature:**
\`\`\`typescript
PI: number;
\`\`\`


"
`;

exports[`generate prefix style contents 4`] = `
"# Class

## Calculator

Calculator class

**Signature:**
\`\`\`typescript
export declare class Calculator implements Calculatable 
\`\`\`

### Remarks

This is remarks of Calculator class

### Examples


\`\`\`javascript
const c = new Calculator()
const v1 = c.add(1, 1)
const v2 = c.sub(1, 1)
\`\`\`



### Constructor

Conssutructor of usage

**Signature:**
\`\`\`typescript
constructor(type: string);
\`\`\`


### Methods

#### add

add method

**Signature:**
\`\`\`typescript
add(a: number, b: number): number;
\`\`\`

*Parameters*

| Parameter | Type | Description |
| --- | --- | --- |
| a | number | target 1 |
| b | number | target 2 |

#### sub

sub method

**Signature:**
\`\`\`typescript
sub(a: number, b: number): number;
\`\`\`

*Parameters*

| Parameter | Type | Description |
| --- | --- | --- |
| a | number | target 1 |
| b | number | target 2 |


### Properties

#### PI

PI

**Signature:**
\`\`\`typescript
PI: number;
\`\`\`

#### type

calcurator types 'simple'

**Signature:**
\`\`\`typescript
type: string;
\`\`\`


"
`;

exports[`generate prefix style contents 5`] = `
"# Variable

## Config

Configrations 

**Signature:**
\`\`\`typescript
Config: {
    [name: string]: unknown;
}
\`\`\`

## VERSION

app version

**Signature:**
\`\`\`typescript
VERSION = \\"1.0.0\\"
\`\`\`

### Remarks

you can lookup application version that is semver format.

### Examples


\`\`\`javascript
console.log(VERSION)
\`\`\`


"
`;

exports[`generate prefix style contents 6`] = `
"# Enum

## ErrorCodes

Error Code

**Signature:**
\`\`\`typescript
export declare enum ErrorCodes 
\`\`\`

### Members

| Member | Value| Description |
| --- | --- | --- |
| InvalidFormat | 1 | Invalid format |
| Succcess | 0 | Success |

## TokenChars

Token Characters

**Signature:**
\`\`\`typescript
export declare enum TokenChars 
\`\`\`

### Members

| Member | Value| Description |
| --- | --- | --- |
| Modulo | \\"%\\" | Modulo charactor |
| Plus | \\"+\\" | Plus charactor |

### Remarks

This is remarks of Token Chararaceters

"
`;

exports[`generate prefix style contents 7`] = `
"# Function

## isBoolean

Whether the value is Boolean or not

**Signature:**
\`\`\`typescript
export declare function isBoolean(val: unknown): val is boolean;
\`\`\`

### Parameters

| Parameter | Type | Description |
| --- | --- | --- |
| val | unknown | target value |

### Returns

 boolean value

## isFunction

Whether the value is Function or not

**Signature:**
\`\`\`typescript
export declare function isFunction(val: unknown): val is Function;
\`\`\`

### Parameters

| Parameter | Type | Description |
| --- | --- | --- |
| val | unknown | target value |

### Returns

 boolean value

## isObject

Whether the value is Object or not

**Signature:**
\`\`\`typescript
export declare function isObject(val: unknown): val is Record<string, unknown>;
\`\`\`

### Parameters

| Parameter | Type | Description |
| --- | --- | --- |
| val | unknown | target value |

### Returns

 boolean value

## isPlainObject

Whether the value is Plain Object or not

**Signature:**
\`\`\`typescript
export declare function isPlainObject(val: unknown): val is Record<string, unknown>;
\`\`\`

### Parameters

| Parameter | Type | Description |
| --- | --- | --- |
| val | unknown | target value |

### Returns

 boolean value

## isPromise

Whether the value is Promise or not

**Signature:**
\`\`\`typescript
export declare function isPromise<T = any>(val: unknown): val is Promise<T>;
\`\`\`

### Parameters

| Parameter | Type | Description |
| --- | --- | --- |
| val | unknown | target value |

### Returns

 boolean value

## isString

Whether the value is String or not

**Signature:**
\`\`\`typescript
export declare function isString(val: unknown): val is string;
\`\`\`

### Parameters

| Parameter | Type | Description |
| --- | --- | --- |
| val | unknown | target value |

### Returns

 boolean value

## isSymbol

Whether the value is Symbol or not

**Signature:**
\`\`\`typescript
export declare function isSymbol(val: unknown): val is symbol;
\`\`\`

### Parameters

| Parameter | Type | Description |
| --- | --- | --- |
| val | unknown | target value |

### Returns

 boolean value

"
`;
